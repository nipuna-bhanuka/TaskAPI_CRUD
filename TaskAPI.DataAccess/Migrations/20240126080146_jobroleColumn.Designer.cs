// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskAPI.DataAccess;

#nullable disable

namespace TaskAPI.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240126080146_jobroleColumn")]
    partial class jobroleColumn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TaskAPI.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("JobRole")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressNo = "23",
                            AuthorName = "Martin Wickramasinghe",
                            City = "Colombo",
                            JobRole = "Developer",
                            Street = "Street1"
                        },
                        new
                        {
                            Id = 2,
                            AddressNo = "25",
                            AuthorName = "Kumarathunga Munidasa",
                            City = "Colombo",
                            JobRole = "Developer",
                            Street = "Street1"
                        },
                        new
                        {
                            Id = 3,
                            AddressNo = "27",
                            AuthorName = "Mahagama Sekara",
                            City = "Colombo",
                            JobRole = "QA",
                            Street = "Street2"
                        });
                });

            modelBuilder.Entity("TaskAPI.Models.Todo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("Due")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Todos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Created = new DateTime(2024, 1, 26, 13, 31, 45, 853, DateTimeKind.Local).AddTicks(2562),
                            Description = "Description 1",
                            Due = new DateTime(2024, 1, 31, 13, 31, 45, 853, DateTimeKind.Local).AddTicks(2572),
                            Status = 0,
                            Title = "Get books for school"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            Created = new DateTime(2024, 1, 26, 13, 31, 45, 853, DateTimeKind.Local).AddTicks(2580),
                            Description = "Description 2",
                            Due = new DateTime(2024, 1, 31, 13, 31, 45, 853, DateTimeKind.Local).AddTicks(2580),
                            Status = 0,
                            Title = "Get books for school2"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 3,
                            Created = new DateTime(2024, 1, 26, 13, 31, 45, 853, DateTimeKind.Local).AddTicks(2582),
                            Description = "Description 3",
                            Due = new DateTime(2024, 1, 31, 13, 31, 45, 853, DateTimeKind.Local).AddTicks(2583),
                            Status = 2,
                            Title = "Get books for school3"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 1,
                            Created = new DateTime(2024, 1, 26, 13, 31, 45, 853, DateTimeKind.Local).AddTicks(2584),
                            Description = "Description 4",
                            Due = new DateTime(2024, 1, 31, 13, 31, 45, 853, DateTimeKind.Local).AddTicks(2585),
                            Status = 0,
                            Title = "Get books for school4"
                        });
                });

            modelBuilder.Entity("TaskAPI.Models.Todo", b =>
                {
                    b.HasOne("TaskAPI.Models.Author", "Author")
                        .WithMany("Todos")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("TaskAPI.Models.Author", b =>
                {
                    b.Navigation("Todos");
                });
#pragma warning restore 612, 618
        }
    }
}
